require('dotenv').config();
const axios = require('axios');
const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder, Events, Partials } = require('discord.js');

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],
  partials: [Partials.Message, Partials.Channel]
});

// Obfuscator Lua ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö Lura.ph
function advancedLuaObfuscator(code) {
  const reserved = [
    'local', 'function', 'end', 'then', 'if', 'else', 'elseif', 'for',
    'while', 'do', 'return', 'true', 'false', 'nil', 'and', 'or', 'not'
  ];

  const dontTouch = ['game', 'workspace', 'script', 'CFrame', 'Vector3', 'math'];
  const nameMap = new Map();
  const functionNames = new Set();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö obfuscate ‡∏ä‡∏∑‡πà‡∏≠
  function obfuscateName(original) {
    if (reserved.includes(original) || dontTouch.includes(original)) return original;
    if (nameMap.has(original)) return nameMap.get(original);

    const obf = '_0x' + Math.random().toString(36).slice(2, 10);
    nameMap.set(original, obf);
    return obf;
  }

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Set
  code = code.replace(/function\s+([a-zA-Z_][a-zA-Z0-9_]*)/g, (match, name) => {
    const obfName = obfuscateName(name);
    functionNames.add(name);  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Set
    return `function ${obfName}`;
  });

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡πÑ‡∏ß‡πâ
  code = code.replace(/\b([a-zA-Z_][a-zA-Z0-9_]*)\s*\(/g, (match, name) => {
    // ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ reserved, dontTouch ‡∏´‡∏£‡∏∑‡∏≠ object.method ‡πÄ‡∏ä‡πà‡∏ô CFrame.new
    if (reserved.includes(name) || dontTouch.includes(name)) return match;

    // ‡∏Ç‡πâ‡∏≤‡∏° object.method ‡πÄ‡∏ä‡πà‡∏ô CFrame.new
    const prevChar = code[code.indexOf(match) - 1];
    if (prevChar === '.') return match;

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    if (functionNames.has(name)) {
      return obfuscateName(name) + '(';
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
    const obfName = obfuscateName(name);
    return `${obfName}${Math.random().toString(36).slice(2, 5)}(`;
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡πà‡∏≤ random ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
  code = code.replace(/\b([a-zA-Z_][a-zA-Z0-9_]*)\b/g, (match, name) => {
    if (reserved.includes(name) || dontTouch.includes(name)) return match;
    if (nameMap.has(name)) return nameMap.get(name);
    return obfuscateName(name);
  });

  // ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
  return code.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
}


// Map ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å message.id
const uploadedLuaMap = new Map();

client.on('messageCreate', async (message) => {
  if (message.author.bot || !message.attachments.size) return;

  const file = message.attachments.first();
  if (!file.name.endsWith('.lua')) {
    return message.reply('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `.lua` ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
  }

  try {
    // ‡πÄ‡∏ä‡πá‡∏Ñ URL ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    const response = await axios.get(file.url);
    const code = response.data;

    uploadedLuaMap.set(message.id, code);

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`obfuscate_${message.id}`)
        .setLabel('Obfuscate')
        .setStyle(ButtonStyle.Primary)
    );

    await message.reply({
      content: `üìÑ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå **${file.name}** ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ Obfuscate`,
      components: [row]
    });
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå:', err.message);
    message.reply('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message);
  }
});

client.on(Events.InteractionCreate, async (interaction) => {
  if (!interaction.isButton()) return;

  const customId = interaction.customId;
  if (!customId.startsWith('obfuscate_')) return;

  const messageId = customId.split('_')[1];
  const code = uploadedLuaMap.get(messageId);

  if (!code) {
    return interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ', ephemeral: true });
  }

  const obf = advancedLuaObfuscator(code);

  if (obf.length > 1900) {
    const file = new AttachmentBuilder(Buffer.from(obf, 'utf-8'), { name: 'obfuscated.lua' });
    return interaction.reply({
      content: 'üåÄ Obfuscate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏≤‡∏ß‡πÄ‡∏•‡∏¢‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô',
      files: [file]
    });
  } else {
    return interaction.reply({ content: '```lua\n' + obf + '\n```' });
  }
});

client.once('ready', () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
});

client.login(process.env.TOKEN || 'MTM1OTkwNTU4MzEyMTE3NDc4MA.GV1ozs.fiWTZ-C0EEYPWljxQ8SYfmcWNAsTwQ0ttwsGOo'); // ‡πÉ‡∏ä‡πâ .env ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà token ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
