const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, PermissionsBitField } = require('discord.js');
const mysql = require('mysql2');
const { token } = require('./config.json'); // ‡πÉ‡∏™‡πà token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config.json
// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
const db = mysql.createPool({
  host: 'bbwxghpmlzumroydpyl5-mysql.services.clever-cloud.com',
  user: 'uaaoxn5yplzyg4vy',
  password: 'QGmOGl45AbIlP2d7QYjx',
  database: 'bbwxghpmlzumroydpyl5',
  port: 3306,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});
db.getConnection((err, connection) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to MySQL database');
  connection.release(); // release the connection back to the pool
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers, // üëà ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ role
  ],
});


client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}`);
});
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå
function generateKey() {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let key = '';
  for (let i = 0; i < 32; i++) {
    key += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return key;
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
// ...‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...
client.on('ready', async () => {
  const command = new SlashCommandBuilder()
    .setName('setup')
    .setDescription('setup the bot');
  
  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏±‡∏ö Discord API
  await client.application.commands.create(command.toJSON());
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.isCommand()) {
    if (interaction.commandName === 'setup') {
      if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
        return interaction.reply({ content: 'You must be an admin to use this command.', ephemeral: true });
      }

      const embed = {
        title: 'Dynamic Hub | Whitelist Panel',
        description: [
          '```',
          'If you purchase a script, you can click on "Get Script" to receive your script.',
          'If you ever need to reset your HWID, simply click on "Reset HWID" to update it.',
          '```'
        ].join('\n'),
        color: 0x57F287,
        footer: { text: 'by x2Livex' },
        image: {
          url: 'https://example.com/your-image-url.png' // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        }
      };

      const row1 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('redeemkey')
          .setEmoji('üîë')
          .setLabel('Redeem Key')
          .setStyle(ButtonStyle.Success),
      
        new ButtonBuilder()
          .setCustomId('getscript')
          .setEmoji('üìú')
          .setLabel('Get Script')
          .setStyle(ButtonStyle.Primary),
      
        new ButtonBuilder()
          .setCustomId('resethwid')
          .setEmoji('üîß')
          .setLabel('Reset HWID')
          .setStyle(ButtonStyle.Danger)
      );

      const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('redeemtoken')
          .setEmoji('üîë')
          .setLabel('Redeem Token')
          .setStyle(ButtonStyle.Success),
    
        new ButtonBuilder()
          .setCustomId('claimmonthly')
          .setEmoji('üéÅ')
          .setLabel('Claim Monthly')
          .setStyle(ButtonStyle.Success),

        new ButtonBuilder()
          .setCustomId('leaderboard')
          .setEmoji('üìä')
          .setLabel('Leaderboard')
          .setStyle(ButtonStyle.Secondary),

        new ButtonBuilder()
          .setCustomId('infos')
          .setEmoji('üì∞')
          .setLabel('Infos')
          .setStyle(ButtonStyle.Secondary),
      );

      const row3 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('genkey')
          .setEmoji('üõ†Ô∏è')
          .setLabel('Gen Key')
          .setStyle(ButtonStyle.Secondary),
      
        new ButtonBuilder()
          .setCustomId('gentoken')
          .setEmoji('üõ†Ô∏è')
          .setLabel('Gen Token')
          .setStyle(ButtonStyle.Secondary)
      );

      await interaction.reply({ embeds: [embed], components: [row1, row2, row3] });

      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
      db.getConnection((err, connection) => {
        if (err) {
          console.error('Database connection error:', err);
          return;
        }

        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        connection.query('SELECT * FROM your_table WHERE condition = ?', ['value'], (err, results) => {
          if (err) {
            console.error('Error executing query:', err);
          } else {
            console.log('Query results:', results);
          }
          connection.release();
        });
      });
    }
  }
  else if (interaction.customId === 'gentoken') {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return interaction.reply({ content: 'Only admins can generate token keys.', ephemeral: true });
    }

    const tokenKey = generateKey(); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generateKey() ‡πÄ‡∏î‡∏¥‡∏°

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥
    db.query('SELECT * FROM `token_keys` WHERE `key` = ?', [tokenKey], (err, results) => {
      if (err) {
        console.error('DB Error:', err);
        return interaction.reply({ content: 'Failed to generate token key.', ephemeral: true });
      }

      if (results.length > 0) {
        return interaction.reply({ content: 'Duplicate token key. Try again.', ephemeral: true });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token key ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      db.query('INSERT INTO `token_keys` (`key`) VALUES (?)', [tokenKey], (err) => {
        if (err) {
          console.error('Error inserting token key:', err);
          return interaction.reply({ content: 'Failed to save token key.', ephemeral: true });
        }

        interaction.reply({ content: `‚úÖ Token key generated:\n\`${tokenKey}\``, ephemeral: true });
      });
    });
  } else if (interaction.customId === 'redeemtoken') {
    const modal = new ModalBuilder()
      .setCustomId('redeem_token_modal')
      .setTitle('Redeem Token')
      .addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('token_key_input')
            .setLabel('Key')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
            .setMaxLength(32)
        )
      );
    await interaction.showModal(modal);
  } else if (interaction.customId === 'redeem_token_modal') {
    const tokenKey = interaction.fields.getTextInputValue('token_key_input');
    const userId = interaction.user.id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á `token_keys` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    db.query('SELECT * FROM `token_keys` WHERE `key` = ?', [tokenKey], (err, tokenResults) => {
      if (err) {
        console.error('Error checking token key:', err);
        return interaction.reply({ content: 'An error occurred while checking the token key.', ephemeral: true });
      }

      if (tokenResults.length === 0) {
        return interaction.reply({ content: 'Invalid or already used token key.', ephemeral: true });
      }

      // Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á -> ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á `token_keys`
      db.query('DELETE FROM `token_keys` WHERE `key` = ?', [tokenKey], (err) => {
        if (err) {
          console.error('Error deleting used token:', err);
          return interaction.reply({ content: 'Error redeeming token key.', ephemeral: true });
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ +2
        db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err, redeemedRows) => {
          if (err) {
            console.error('Error checking user redemption:', err);
            return interaction.reply({ content: 'An error occurred during token redemption.', ephemeral: true });
          }

          let currentTokens = 0;
          if (redeemedRows.length > 0) {
            currentTokens = redeemedRows[0].tokens || 0;
          }

          const newTokenCount = currentTokens + 2;

          db.query('UPDATE `redeemed_keys` SET `tokens` = ? WHERE `user_id` = ?', [newTokenCount, userId], (err) => {
            if (err) {
              console.error('Error updating token count:', err);
              return interaction.reply({ content: 'Failed to update token count.', ephemeral: true });
            }

            interaction.reply({ content: `‚úÖ Token redeemed successfully! You now have ${newTokenCount} tokens.`, ephemeral: true });
          });
        });
      });
    });
  }  else if (interaction.customId === 'claimmonthly') {
    const userId = interaction.user.id;
  
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢ redeemkey ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err, rows) => {
      if (err) {
        console.error('DB Error:', err);
        return interaction.reply({ content: 'An error occurred while checking your data.', ephemeral: true });
      }
  
      if (rows.length === 0) {
        return interaction.reply({ content: 'You need to redeem a key before claiming monthly tokens.', ephemeral: true });
      }
  
      const userData = rows[0];
      const now = new Date();
      const lastClaimed = userData.last_claimed ? new Date(userData.last_claimed) : null;
  
      if (lastClaimed) {
        const diffTime = now - lastClaimed;
        const daysPassed = diffTime / (1000 * 60 * 60 * 24);
  
        if (daysPassed < 30) {
          const daysLeft = Math.ceil(30 - daysPassed);
          return interaction.reply({ content: `‚è≥ You have already claimed your monthly tokens.\nPlease wait ${daysLeft} more day(s).`, ephemeral: true });
        }
      }
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Token +2
      const newTokenCount = (userData.tokens || 0) + 2;
  
      db.query('UPDATE `redeemed_keys` SET `tokens` = ?, `last_claimed` = ? WHERE `user_id` = ?', [newTokenCount, now, userId], (err) => {
        if (err) {
          console.error('Update Error:', err);
          return interaction.reply({ content: 'An error occurred while updating your tokens.', ephemeral: true });
        }
  
        interaction.reply({ content: `üéÅ Monthly reward claimed! You now have ${newTokenCount} tokens.`, ephemeral: true });
      });
    });
  }
   else if (interaction.isButton()) {
    if (interaction.customId === 'genkey') {
      if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
        return interaction.reply({ content: 'You must be an admin to use this button.', ephemeral: true });
      }

      const newKey = generateKey();
      db.query('SELECT * FROM `key_table` WHERE `key` = ?', [newKey], (err, results) => {
        if (err) {
          console.error('Error checking key:', err);
          return interaction.reply({ content: 'An error occurred while checking the key.', ephemeral: true });
        }

        if (results.length > 0) {
          return interaction.reply({ content: 'Duplicate key, please try again.', ephemeral: true });
        }

        db.query('INSERT INTO `key_table` (`key`) VALUES (?)', [newKey], (err) => {
          if (err) {
            console.error('Could not create key:', err);
            return interaction.reply({ content: 'Failed to generate key.', ephemeral: true });
          }

          interaction.reply({ content: `Your key has been generated: \`${newKey}\``, ephemeral: true });
        });
      });
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• leaderboard
    async function getLeaderboard() {
      try {
        const [rows] = await db.promise().query(`
          SELECT user_id, total_executed
          FROM redeemed_keys
          ORDER BY total_executed DESC
          LIMIT 20;
        `);
        console.log('Leaderboard fetched:', rows);
        return rows;
      } catch (error) {
        console.error('Error fetching leaderboard:', error);
        throw new Error('An error occurred while fetching the leaderboard.');
      }
    }
    
    if (!interaction.isButton()) return;

    if (interaction.customId === 'leaderboard') {
      try {
        console.log("Button pressed: leaderboard");
    
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getLeaderboard
        const leaderboard = await getLeaderboard();
    
        if (leaderboard.length === 0) {
          console.log("No leaderboard data found.");
          return interaction.reply({ content: '‚ö†Ô∏è No leaderboard data found.', ephemeral: true });
        }
    
        let leaderboardMessage = 'üìä **Leaderboard (Total Executed)**\n\n';
        leaderboard.forEach((entry, index) => {
          if (entry.total_executed > 0) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ total_executed ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 0 ‡∏´‡∏£‡∏∑‡∏≠ NULL
            const formattedExecuted = entry.total_executed.toLocaleString(); // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤
            leaderboardMessage += `${index + 1}. **User:** <@${entry.user_id}> - **Total Executed:** ${formattedExecuted}\n`;
          }
        });
        console.log("Leaderboard message:", leaderboardMessage);
    
        await interaction.reply({
          content: leaderboardMessage,
          ephemeral: true,
        });
    
      } catch (error) {
        console.error('Error displaying leaderboard:', error);
        return interaction.reply({ content: '‚ùå An error occurred while fetching the leaderboard data.', ephemeral: true });
      }
    }
    if (!interaction.isButton()) return;

    if (interaction.customId === 'infos') {
      const userId = interaction.user.id;
    
      db.query('SELECT * FROM redeemed_keys WHERE user_id = ?', [userId], (err, results) => {
        if (err) {
          console.error(err);
          return interaction.reply('An error occurred while connecting to the database!');
        }
    
        if (results.length === 0) {
          return interaction.reply({content : 'You need to be whitelisted to view your stats. If you have a script key, click on the Redeem button below to redeem it', ephemeral: true});
        }
    
        const user = results[0];
        const totalExecuted = user.total_executed;
        const tokens = user.tokens;
        const lastClaimed = user.last_claimed ? new Date(user.last_claimed).toLocaleString() : 'No claims yet';
    
        // Format the message to look nice
        const infoMessage = {
          content: "",
          embeds: [
            {
              title: "User information",
              fields: [
                {
                  name: "",
                  value: `User : <@${user.user_id}>`,
                  inline: false
                },
                {
                  name: "Total Executed",
                  value: `\`\`\`\n${totalExecuted}\n\`\`\``,
                  inline: true
                },
                {
                  name: "Reset Token Left",
                  value: `\`\`\`\n${tokens}\n\`\`\``,
                  inline: true
                },
                {
                  name: "Last Claimed",
                  value: `\`\`\`\n${lastClaimed}\n\`\`\``,
                  inline: true
                }
              ],
              color: 0x57F287, // Green color like the example in the webhook
            }
          ],
          ephemeral: true // Only show to the user who clicked the button
        };
    
        interaction.reply(infoMessage);
      });
    }
    
    else if (interaction.customId === 'redeemkey') {
      const modal = new ModalBuilder()
        .setCustomId('redeem_modal')
        .setTitle('Redeem Key')
        .addComponents(
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId('redeem_key_input')
              .setLabel('Key')
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
              .setMaxLength(32)
          )
        );
      await interaction.showModal(modal);
    }

    else if (interaction.customId === 'resethwid') {
      const userId = interaction.user.id;
    
      db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err, redeemedRows) => {
        if (err) {
          console.error('Error checking key:', err);
          return interaction.reply({ content: 'An error occurred while checking your key.', ephemeral: true });
        }
    
        if (redeemedRows.length === 0) {
          return interaction.reply({ content: 'You have not redeemed a key yet.', ephemeral: true });
        }
    
        // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Token 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ reset HWID
        const currentTokens = redeemedRows[0].tokens;
        if (currentTokens <= 0) {
          return interaction.reply({ content: 'You do not have enough tokens to reset HWID.', ephemeral: true });
        }
    
        const newTokenCount = currentTokens - 1;
    
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        db.query('UPDATE `redeemed_keys` SET `tokens` = ? WHERE `user_id` = ?', [newTokenCount, userId], (err) => {
          if (err) {
            console.error('Error updating token count:', err);
            return interaction.reply({ content: 'An error occurred while updating your token count.', ephemeral: true });
          }
    
          // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï HWID
          db.query('UPDATE `redeemed_keys` SET `hwid` = "" WHERE `user_id` = ?', [userId], (err) => {
            if (err) {
              console.error('Error resetting HWID:', err);
              return interaction.reply({ content: 'An error occurred while resetting your HWID.', ephemeral: true });
            }
    
            interaction.reply({ content: `Your HWID has been successfully reset. Your new token count is: ${newTokenCount}`, ephemeral: true });
          });
        });
      });
    }
    else if (interaction.customId === 'getscript') {
      const userId = interaction.user.id;
      const userName = interaction.user.username;

      db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ? AND `user_name` = ?', [userId, userName], (err, redeemedRows) => {
        if (err) {
          console.error('Error checking key:', err);
          return interaction.reply({ content: 'An error occurred while checking your key.', ephemeral: true });
        }

        if (redeemedRows.length === 0) {
          return interaction.reply({ content: 'You need to be whitelisted to get this script. If you have a script key, click on the Redeem button below to redeem it.', ephemeral: true });
        }

        const redeemedKey = redeemedRows[0].key;

        const embed = {
          title: 'Dynamic Hub | Script Loader',
          description: [
            '```lua',
            `getgenv().Key = "${redeemedKey}"`,
            'loadstring(game:HttpGet("https://raw.githubusercontent.com/Dynamic-Script/Loader/main/Loader.lua"))()',
            '```'
          ].join('\n'),
          color: 0x57F287,
          footer: { text: '' },
          image: {
            url: 'https://example.com/your-image-url.png' // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á
          }
        };
        
        interaction.reply({
          embeds: [embed],
          ephemeral: true
        });
      });        
    }
  } 
  else if (interaction.customId === 'redeem_modal') {
    const redeemedKey = interaction.fields.getTextInputValue('redeem_key_input');
    const userId = interaction.user.id;
    const userName = interaction.user.username;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô key_table
    db.query('SELECT * FROM `key_table` WHERE `key` = ?', [redeemedKey], (err, results) => {
        if (err) {
            console.error('Error checking key:', err);
            return interaction.reply({ content: 'An error occurred while redeeming the key.', ephemeral: true });
        }

        if (results.length === 0) {
            return interaction.reply({ content: 'Invalid or non-existent key.', ephemeral: true });
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å redeem ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô redeemed_keys
        db.query('SELECT * FROM `redeemed_keys` WHERE `key` = ?', [redeemedKey], (err1, redeemedRows) => {
            if (err1) {
                console.error('Error checking redemption status:', err1);
                return interaction.reply({ content: 'An error occurred while checking your redemption status.', ephemeral: true });
            }

            // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏ñ‡∏π‡∏Å redeem ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            if (redeemedRows.length > 0) {
                return interaction.reply({ content: 'This key has already been redeemed by someone else.', ephemeral: true });
            }

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ redeem ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ redeem ‡∏Ñ‡∏µ‡∏¢‡πå
            db.query('INSERT INTO `redeemed_keys` (`key`, `user_id`, `user_name`) VALUES (?, ?, ?)', [redeemedKey, userId, userName], (err2) => {
                if (err2) {
                    console.error('Error saving redeemed key:', err2);
                    return interaction.reply({ content: 'An error occurred while saving the redeemed key.', ephemeral: true });
                }

                console.log(`Key redeemed successfully for user: ${userId}`);

                // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤ redeem ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                interaction.reply({ content: 'Key redeemed successfully!', ephemeral: true });

                // ‚úÖ ‡πÉ‡∏´‡πâ‡∏¢‡∏® Buyers
                const role = interaction.guild.roles.cache.find(r => r.name === '‡≠ß ‚Äß‚ÇäÀöüí∏ Buyers  ‚ãÖ ‚òÜ ‚Çé');
                if (role) {
                    interaction.member.roles.add(role).catch(console.error);
                }
            });
        });
    });
}
else if (interaction.customId === 'redeem_modal') {
  const redeemedKey = interaction.fields.getTextInputValue('redeem_key_input');
  const userId = interaction.user.id;
  const userName = interaction.user.username;

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô key_table
  db.query('SELECT * FROM `key_table` WHERE `key` = ?', [redeemedKey], (err, results) => {
      if (err) {
          console.error('Error checking key:', err);
          return interaction.reply({ content: 'An error occurred while redeeming the key.', ephemeral: true });
      }

      if (results.length === 0) {
          return interaction.reply({ content: 'Invalid or non-existent key.', ephemeral: true });
      }

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å redeem ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô redeemed_keys
      db.query('SELECT * FROM `redeemed_keys` WHERE `key` = ?', [redeemedKey], (err1, redeemedRows) => {
          if (err1) {
              console.error('Error checking redemption status:', err1);
              return interaction.reply({ content: 'An error occurred while checking your redemption status.', ephemeral: true });
          }

          // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏ñ‡∏π‡∏Å redeem ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
          if (redeemedRows.length > 0) {
              return interaction.reply({ content: 'This key has already been redeemed by someone else.', ephemeral: true });
          }

          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ redeem ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ redeem ‡∏Ñ‡∏µ‡∏¢‡πå
          db.query('INSERT INTO `redeemed_keys` (`key`, `user_id`, `user_name`) VALUES (?, ?, ?)', [redeemedKey, userId, userName], (err2) => {
              if (err2) {
                  console.error('Error saving redeemed key:', err2);
                  return interaction.reply({ content: 'An error occurred while saving the redeemed key.', ephemeral: true });
              }

              console.log(`Key redeemed successfully for user: ${userId}`);

              // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤ redeem ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              interaction.reply({ content: 'Key redeemed successfully!', ephemeral: true });

              // ‚úÖ ‡πÉ‡∏´‡πâ‡∏¢‡∏® Buyers
              const role = interaction.guild.roles.cache.find(r => r.name === '‡≠ß ‚Äß‚ÇäÀöüí∏ Buyers  ‚ãÖ ‚òÜ ‚Çé');
              if (role) {
                  interaction.member.roles.add(role).catch(console.error);
              }
          });
      });
  });
}

  else if (interaction.customId === 'infos') {
    const userId = interaction.user.id;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤ user ‡∏ô‡∏µ‡πâ redeem key ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [userData] = await connection.execute('SELECT redeem_key, total_executed, tokens FROM users WHERE discord_id = ?', [userId]);

    if (userData.length > 0 && userData[0].redeem_key) {
        // ‡∏ñ‡πâ‡∏≤ redeem_key ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const totalExecuted = userData[0].total_executed;
        const tokens = userData[0].tokens;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        const infoMessage = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\nTotal Executed: ${totalExecuted}\nTokens: ${tokens}`;

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        await interaction.reply({ content: infoMessage, ephemeral: true });
    } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà redeem key ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
        await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ redeem key!', ephemeral: true });
    }
}
});
const { SlashCommandBuilder } = require('@discordjs/builders');
const { CommandInteraction } = require('discord.js');

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠ bot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
client.once('ready', () => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö /infos
    client.application.commands.create(
        new SlashCommandBuilder()
            .setName('infos')
            .setDescription('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
            .addStringOption(option =>
                option.setName('username')
                    .setDescription('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
                    .setRequired(true)
            )
    );
});
client.once('ready', async () => {
  console.log(`Logged in as ${client.user.tag}`);

  try {
    await client.application.commands.create({
      name: 'infos',
      description: 'View information of a user (admins only)',
      options: [
        {
          type: 6,
          name: 'user',
          description: 'Select a user to view info',
          required: false
        }
      ]
    });

    console.log('‚úÖ Slash command /infos registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /infos command:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'infos') {
    try {
      const isAdmin = interaction.member.permissions.has('ADMINISTRATOR');
      let userId;
      let selectedUser;

      if (isAdmin) {
        selectedUser = interaction.options.getUser('user');
        userId = selectedUser ? selectedUser.id : interaction.user.id;
      } else {
        userId = interaction.user.id;
      }

      db.query('SELECT * FROM redeemed_keys WHERE user_id = ?', [userId], (err, results) => {
        if (err) {
          console.error(err);
          return interaction.reply({
            content: '‚ùå An error occurred while connecting to the database!',
            ephemeral: true
          });
        }

        if (results.length === 0) {
          return interaction.reply({
            content: '‚ö†Ô∏è You need to be whitelisted to view your stats. If you have a script key, click on the Redeem button below to redeem it.',
            ephemeral: true
          });
        }

        const user = results[0];
        const totalExecuted = user.total_executed;
        const tokens = user.tokens;
        const key = user.key
        const lastClaimed = user.last_claimed
          ? new Date(user.last_claimed).toLocaleString()
          : 'No claims yet';

        const infoMessage = {
          embeds: [
            {
              title: "üìä Whitelist User Info",
              color: 0x57F287,
              fields: [
                {
                  name: "",
                  value: `User : <@${user.user_id}>`,
                  inline: false
                },
                {
                  name: "Key",
                  value: `\`\`\`\n${key}\n\`\`\``,
                  inline: true
                },
                {
                  name: "Total Executed",
                  value: `\`\`\`\n${totalExecuted}\n\`\`\``,
                  inline: true
                },
                {
                  name: "Reset Token Left",
                  value: `\`\`\`\n${tokens}\n\`\`\``,
                  inline: true
                },
                {
                  name: "Last Claimed",
                  value: `\`\`\`\n${lastClaimed}\n\`\`\``,
                  inline: true
                }
              ]
            }
          ],
          ephemeral: true
        };

        interaction.reply(infoMessage);
      });
    } catch (error) {
      console.error('‚ùå Unexpected error in /infos command:', error);
      interaction.reply({
        content: '‚ùå An unexpected error occurred. Please try again later.',
        ephemeral: true
      });
    }
  }
});
client.once('ready', async () => {
  await client.application.commands.create({
    name: 'blacklistkeys',
    description: 'Blacklist a script key (admin only)',
    options: [
      {
        name: 'key',
        description: 'The script key to blacklist',
        type: 3, // String
        required: true,
      },
      {
        name: 'reason',
        description: 'Reason for blacklisting',
        type: 3,
        required: false,
      }
    ]
  });
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.isChatInputCommand() && interaction.commandName === 'blacklistkeys') {
    const adminRole = interaction.guild.roles.cache.find(role => role.name === "üëë");
    if (!interaction.member.roles.cache.has(adminRole?.id)) {
      return interaction.reply({ content: '‚ùå You do not have permission to use this command.', ephemeral: true });
    }

    const key = interaction.options.getString('key');
    const reason = interaction.options.getString('reason') || 'No reason provided';

    db.query('SELECT * FROM redeemed_keys WHERE `key` = ?', [key], (err, results) => {
      if (err) {
        console.error(err);
        return interaction.reply({ content: '‚ùå Database error occurred while fetching redeemed key info.', ephemeral: true });
      }

      if (results.length === 0) {
        return interaction.reply({ content: '‚ùå This key has not been redeemed or does not exist.', ephemeral: true });
      }

      const redeemedUser = results[0];
      const redeemedUsername = redeemedUser.user_name;
      const redeemedUserId = redeemedUser.user_id;

      db.query('INSERT INTO blacklisted_keys (key_value, reason, blacklisted_by, discord_user_id, redeemed_by, redeemed_user_id) VALUES (?, ?, ?, ?, ?, ?)',
        [key, reason, interaction.user.username, interaction.user.id, redeemedUsername, redeemedUserId], async (err1) => {
          if (err1) {
            console.error(err1);
            return interaction.reply({ content: '‚ùå Failed to blacklist the key.', ephemeral: true });
          }

          // üîÅ ‡∏•‡∏ö key ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å redeemed_keys ‡πÅ‡∏•‡∏∞ key_table
          db.query('DELETE FROM redeemed_keys WHERE `key` = ?', [key], (err2) => {
            if (err2) console.error('‚ùå Failed to delete from redeemed_keys:', err2);

            db.query('DELETE FROM key_table WHERE `key` = ?', [key], async (err3) => {
              if (err3) console.error('‚ùå Failed to delete from key_table:', err3);

              // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô blacklist
              const guildMember = await interaction.guild.members.fetch(redeemedUserId).catch(console.error);
              const blacklistedRole = interaction.guild.roles.cache.find(role => role.name === "‚ùå Blacklisted");

              if (guildMember && blacklistedRole) {
                guildMember.roles.add(blacklistedRole).catch(console.error);
              }

              // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
              interaction.reply({
                content: `‚úÖ Successfully blacklisted key:\n\`\`\`${key}\`\`\`\nReason: ${reason}\nblacklisted by: ${interaction.user.username} (ID: ${interaction.user.id})\nRedeemed by: ${redeemedUsername} (ID: ${redeemedUserId})`,
                ephemeral: true
              });
            });
          });
        });
    });
  }
});
client.once('ready', async () => {
  console.log(`Logged in as ${client.user.tag}`);

  try {
    await client.application.commands.create({
      name: 'addwhitelist',
      description: 'Add whitelist for a user (admins only)',
      options: [
        {
          type: 6,
          name: 'user',
          description: 'Select a user to whitelist',
          required: true
        }
      ]
    });

    console.log('‚úÖ Slash command /addwhitelist registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /addwhitelist command:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  if (interaction.commandName === 'addwhitelist') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: '‚ùå You do not have permission to use this command.', ephemeral: true });
    }

    const targetUser = interaction.options.getUser('user');
    if (!targetUser) {
      return interaction.reply({ content: '‚ö†Ô∏è Please specify a user to whitelist.', ephemeral: true });
    }

    const userId = targetUser.id;
    const userName = targetUser.username;
    const generatedKey = generateKey(); // üîë

    db.query('INSERT INTO `key_table` (`key`) VALUES (?)', [generatedKey], (err1) => {
      if (err1) {
        console.error('[‚ùå] Error inserting to key_table:', err1);
        return interaction.reply({ content: '‚ùå Failed to insert key into key_table.', ephemeral: true });
      }

      db.query(
        'INSERT INTO `redeemed_keys` (`key`, `user_id`, `user_name`, `tokens`) VALUES (?, ?, ?, ?)',
        [generatedKey, userId, userName, 3],
        (err2) => {
          if (err2) {
            console.error('[‚ùå] Error inserting to redeemed_keys:', err2);
            return interaction.reply({ content: '‚ùå Failed to insert key into redeemed_keys.', ephemeral: true });
          }

          const role = interaction.guild.roles.cache.find(r => r.name === '‡≠ß ‚Äß‚ÇäÀöüí∏ Buyers  ‚ãÖ ‚òÜ ‚Çé');
          const member = interaction.guild.members.cache.get(userId);
          if (role && member) {
            member.roles.add(role).catch(console.error);
          }

          interaction.reply({
            content: `‚úÖ Whitelisted **${userName}**!\nüîë Key: \`${generatedKey}\`\nüéüÔ∏è Tokens: 3`,
            ephemeral: true
          });
        }
      );
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'addtoken',
      description: 'Add tokens to a user (admins only)',
      options: [
        {
          type: 6, // USER
          name: 'user',
          description: 'User to give tokens to',
          required: true
        },
        {
          type: 4, // INTEGER
          name: 'amount',
          description: 'Amount of tokens to add',
          required: true
        }
      ]
    });

    console.log('‚úÖ Slash command /addtoken registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /addtoken command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  if (interaction.commandName === 'addtoken') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: '‚ùå You do not have permission to use this command.', ephemeral: true });
    }

    const targetUser = interaction.options.getUser('user');
    const amount = interaction.options.getInteger('amount');

    if (!targetUser || isNaN(amount) || amount <= 0) {
      return interaction.reply({ content: '‚ö†Ô∏è Invalid user or token amount.', ephemeral: true });
    }

    const userId = targetUser.id;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï token ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db.query(
      'UPDATE `redeemed_keys` SET `tokens` = `tokens` + ? WHERE `user_id` = ?',
      [amount, userId],
      (err, result) => {
        if (err) {
          console.error('[‚ùå] Error updating tokens:', err);
          return interaction.reply({ content: '‚ùå Failed to add tokens.', ephemeral: true });
        }

        if (result.affectedRows === 0) {
          return interaction.reply({ content: '‚ö†Ô∏è User not found in redeemed_keys.', ephemeral: true });
        }

        interaction.reply({
          content: `‚úÖ Successfully added **${amount} token(s)** to **${targetUser.username}**.`,
          ephemeral: false
        });
      }
    );
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'resettoken',
      description: 'Reset tokens to a user (admins only)',
      options: [
        {
          type: 6, // USER
          name: 'user',
          description: 'User to give tokens to',
          required: true
        },
      ]
    });

    console.log('‚úÖ Slash command /resettoken registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /resettoken command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'resettoken') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    const targetUser = interaction.options.getUser('user');
    if (!targetUser) {
      return interaction.reply({ content: 'Please specify a user to reset their tokens.', ephemeral: true });
    }

    const userId = targetUser.id;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å redeemed_keys ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err, results) => {
      if (err) {
        console.error('Error checking user:', err);
        return interaction.reply({ content: 'An error occurred while checking the user data.', ephemeral: true });
      }

      if (results.length === 0) {
        return interaction.reply({
          content: '‚ö†Ô∏è This user is not whitelisted. You need to whitelist them first before resetting tokens.',
          ephemeral: true
        });
      }

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      db.query('UPDATE `redeemed_keys` SET `tokens` = 0 WHERE `user_id` = ?', [userId], (err2) => {
        if (err2) {
          console.error('Error resetting tokens:', err2);
          return interaction.reply({ content: 'An error occurred while resetting tokens.', ephemeral: true });
        }

        interaction.reply({
          content: `‚úÖ Successfully reset tokens for **${targetUser.username}**.`,
          ephemeral: true
        });
      });
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'listbuyers',
      description: '(admins only)',
    });

    console.log('‚úÖ Slash command /listbuyers registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /listbuyers command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'listbuyers') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    // ‡∏´‡∏≤‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "Buyers"
    const role = interaction.guild.roles.cache.find(r => r.name === '‡≠ß ‚Äß‚ÇäÀöüí∏ Buyers  ‚ãÖ ‚òÜ ‚Çé');
    if (!role) {
      return interaction.reply({ content: 'Role "Buyers" not found.', ephemeral: true });
    }

    try {
      // ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "Buyers" ‡∏à‡∏≤‡∏Å Discord API
      const membersWithRole = await interaction.guild.members.fetch();
      
      // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "Buyers"
      const membersWithRoleFiltered = membersWithRole.filter(member => member.roles.cache.has(role.id));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ @
      if (membersWithRoleFiltered.size === 0) {
        return interaction.reply({ content: 'No buyers found.', ephemeral: true });
      }

      const buyerNames = membersWithRoleFiltered.map(member => member.user.toString()).join('\n');

      // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      interaction.reply({
        content: `List of Buyers:\n${buyerNames}`,
        ephemeral: true
      });

    } catch (error) {
      console.error('Error fetching members:', error);
      return interaction.reply({ content: 'An error occurred while fetching members.', ephemeral: true });
    }
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'removewhitelist',
      description: 'Remove Whitelist to a user (admins only)',
      options: [
        {
          type: 6, // USER
          name: 'user',
          description: 'User to give tokens to',
          required: true
        },
      ]
    });

    console.log('‚úÖ Slash command /removewhitelist registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /removewhitelist command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'removewhitelist') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    const targetUser = interaction.options.getUser('user');
    if (!targetUser) {
      return interaction.reply({ content: 'Please specify a user to remove from whitelist.', ephemeral: true });
    }

    const userId = targetUser.id;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô redeemed_keys ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err, results) => {
      if (err) {
        console.error('Error fetching user data:', err);
        return interaction.reply({ content: 'An error occurred while fetching user data.', ephemeral: true });
      }

      if (results.length === 0) {
        return interaction.reply({
          content: 'This user is not in the whitelist or has no redeemed key.',
          ephemeral: true
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å redeemed_keys
      const keyToRemove = results[0].key;

      // ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å redeemed_keys
      db.query('DELETE FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err1) => {
        if (err1) {
          console.error('Error deleting key from redeemed_keys:', err1);
          return interaction.reply({ content: 'An error occurred while removing the key from redeemed_keys.', ephemeral: true });
        }

        // ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å key_table
        db.query('DELETE FROM `key_table` WHERE `key` = ?', [keyToRemove], (err2) => {
          if (err2) {
            console.error('Error deleting key from key_table:', err2);
            return interaction.reply({ content: 'An error occurred while removing the key from key_table.', ephemeral: true });
          }

          // ‡∏•‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "Buyers" ‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
          const role = interaction.guild.roles.cache.find(r => r.name === '‡≠ß ‚Äß‚ÇäÀöüí∏ Buyers  ‚ãÖ ‚òÜ ‚Çé');
          const member = interaction.guild.members.cache.get(userId);
          if (role && member) {
            member.roles.remove(role).catch(console.error);
          }

          interaction.reply({
            content: `‚úÖ Successfully removed **${targetUser.username}** from the whitelist, deleted their key from both key_table and redeemed_keys, and revoked their "Buyers" role.`,
            ephemeral: true
          });
        });
      });
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'settoken',
      description: 'Reset tokens to a user (admins only)',
      options: [
        {
          type: 6, // USER
          name: 'user',
          description: 'User to give tokens to',
          required: true
        },
        {
          type: 4, // INTEGER
          name: 'tokens',
          description: 'Amount of tokens to add',
          required: true
        }
      ]
    });

    console.log('‚úÖ Slash command /settoken registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /settoken command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'settoken') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    const targetUser = interaction.options.getUser('user');
    const newTokens = interaction.options.getInteger('tokens');

    if (!targetUser || newTokens === null || newTokens === undefined) {
      return interaction.reply({ content: 'Please specify a user and a valid number of tokens.', ephemeral: true });
    }

    const userId = targetUser.id;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô redeemed_keys ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    db.query('SELECT * FROM `redeemed_keys` WHERE `user_id` = ?', [userId], (err, results) => {
      if (err) {
        console.error('Error fetching user data:', err);
        return interaction.reply({ content: 'An error occurred while fetching user data.', ephemeral: true });
      }

      if (results.length === 0) {
        return interaction.reply({
          content: 'This user is not in the whitelist or has no redeemed key.',
          ephemeral: true
        });
      }

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡πÉ‡∏´‡∏°‡πà
      db.query('UPDATE `redeemed_keys` SET `tokens` = ? WHERE `user_id` = ?', [newTokens, userId], (err1) => {
        if (err1) {
          console.error('Error updating tokens:', err1);
          return interaction.reply({ content: 'An error occurred while setting the tokens.', ephemeral: true });
        }

        interaction.reply({
          content: `‚úÖ Successfully updated the tokens for **${targetUser.username}** to ${newTokens}.`,
          ephemeral: true
        });
      });
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'keyinfo',
      description: 'key info to a user (admins only)',
      options: [
        {
          type: 3, // STRING (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å)
          name: 'key',
          description: 'Enter the key to get info',
          required: true
        },
      ]
    });

    console.log('‚úÖ Slash command /keyinfo registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /keyinfo command:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'keyinfo') {
    const redeemedKey = interaction.options.getString('key');
    if (!redeemedKey) {
      return interaction.reply({ content: 'Please provide a valid key.', ephemeral: true });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å key_table
    db.query('SELECT * FROM `key_table` WHERE `key` = ?', [redeemedKey], (err, keyResults) => {
      if (err) {
        console.error('Error fetching key data:', err);
        return interaction.reply({ content: 'An error occurred while fetching key data.', ephemeral: true });
      }

      if (keyResults.length === 0) {
        return interaction.reply({ content: 'This key does not exist in the key table.', ephemeral: true });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ redeem ‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å redeemed_keys
      db.query('SELECT * FROM `redeemed_keys` WHERE `key` = ?', [redeemedKey], (err1, redeemedResults) => {
        if (err1) {
          console.error('Error fetching redeemed key data:', err1);
          return interaction.reply({ content: 'An error occurred while fetching redeemed key data.', ephemeral: true });
        }

        if (redeemedResults.length === 0) {
          return interaction.reply({ content: 'This key has not been redeemed yet.', ephemeral: true });
        }

        const redeemedData = redeemedResults[0];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        const keyInfoMessage = `
        **Key Information**:
        - **Key**: \`${redeemedKey}\`
        - **Redeemed by**: ${redeemedData.user_name} (ID: ${redeemedData.user_id})
        - **Tokens**: ${redeemedData.tokens}
        - **Date Redeemed**: ${redeemedData.redeem_date || 'Unknown'}
        `;

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå
        interaction.reply({
          content: keyInfoMessage,
          ephemeral: true
        });
      });
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'log',
      description: 'View the log of key events (admins only)',
      options: [
        {
          type: 4, // Integer (optional) for pagination or limits
          name: 'limit',
          description: 'Number of logs to display',
          required: false
        },
      ]
    });

    console.log('‚úÖ Slash command /log registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /log command:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'log') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    const limit = interaction.options.getInteger('limit') || 10; // If no limit, default to 10

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏´‡∏£‡∏∑‡∏≠ redeemed_keys (‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ)
    db.query('SELECT * FROM `logs_table` ORDER BY `timestamp` DESC LIMIT ?', [limit], (err, logs) => {
      if (err) {
        console.error('Error fetching logs:', err);
        return interaction.reply({ content: 'An error occurred while fetching logs.', ephemeral: true });
      }

      if (logs.length === 0) {
        return interaction.reply({ content: 'No logs found.', ephemeral: true });
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const logMessages = logs.map(log => {
        return `**${log.timestamp}**: ${log.event_description} (Key: ${log.key})`;
      }).join('\n');

      interaction.reply({
        content: `Here are the latest ${logs.length} logs:\n${logMessages}`,
        ephemeral: true
      });
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'keystats',
      description: 'View stats of all keys (admins only)',
    });

    console.log('‚úÖ Slash command /keystats registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /keystats command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'keystats') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å key_table
    db.query('SELECT COUNT(*) AS total_keys FROM `key_table`', (err, results) => {
      if (err) {
        console.error('Error getting total keys:', err);
        return interaction.reply({ content: 'An error occurred while getting total keys.', ephemeral: true });
      }

      const totalKeys = results[0].total_keys;

      // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å redeem ‡∏à‡∏≤‡∏Å redeemed_keys
      db.query('SELECT COUNT(*) AS redeemed_keys FROM `redeemed_keys`', (err1, redeemedResults) => {
        if (err1) {
          console.error('Error getting redeemed keys:', err1);
          return interaction.reply({ content: 'An error occurred while getting redeemed keys.', ephemeral: true });
        }

        const redeemedKeys = redeemedResults[0].redeemed_keys;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô blacklist ‡∏à‡∏≤‡∏Å blacklisted_keys ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        db.query('SELECT * FROM `blacklisted_keys`', (err2, blacklistedResults) => {
          if (err2) {
            console.error('Error getting blacklisted keys:', err2);
            return interaction.reply({ content: 'An error occurred while getting blacklisted keys.', ephemeral: true });
          }

          const blacklistedKeys = blacklistedResults.length;
          const remainingKeys = totalKeys - redeemedKeys - blacklistedKeys;

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          let blacklistDetails = 'List of Blacklisted Keys:\n';
          blacklistedResults.forEach((row, index) => {
            blacklistDetails += `\n**Key**: \`${row.key_value}\`
            **Reason**: ${row.reason}
            **Blacklisted By**: <@${row.blacklisted_by}>
            **Redeemed By**: <@${row.redeemed_by}>\n`;
          });

          interaction.reply({
            content: `**Key Stats:**
üéÅ Total Keys: ${totalKeys}
üîë Redeemed Keys: ${redeemedKeys}
‚ùå Blacklisted Keys: ${blacklistedKeys}
üóùÔ∏è Remaining Keys: ${remainingKeys}

`,
            ephemeral: true
          });
        });
      });
    });
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'keyexpire',
      description: 'Set the expiration time for a key',
      options: [
        {
          type: 3, // STRING: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå
          name: 'key',
          description: 'The key you want to expire',
          required: true,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
          name: 'days',
          description: 'Number of days before expiration',
          required: false,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
          name: 'hours',
          description: 'Number of hours before expiration',
          required: false,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
          name: 'minutes',
          description: 'Number of minutes before expiration',
          required: false,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          name: 'seconds',
          description: 'Number of seconds before expiration',
          required: false,
        },
      ],
    });

    console.log('‚úÖ Slash command /keyexpire registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /keyexpire command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'keyexpire') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    const key = interaction.options.getString('key');
    const days = interaction.options.getInteger('days') || 0;
    const hours = interaction.options.getInteger('hours') || 0;
    const minutes = interaction.options.getInteger('minutes') || 0;
    const seconds = interaction.options.getInteger('seconds') || 0;

    const currentDate = new Date(); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const expirationDate = new Date(currentDate.getTime() + days * 24 * 60 * 60 * 1000 + hours * 60 * 60 * 1000 + minutes * 60 * 1000 + seconds * 1000);

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á `redeemed_keys` ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå
      const [results] = await db.promise().query('SELECT * FROM `redeemed_keys` WHERE `key` = ?', [key]);

      if (results.length === 0) {
        return interaction.reply({ content: 'Key not found in redeemed_keys.', ephemeral: true });
      }

      const keyOwnerDiscordId = results[0].user_name; // Discord User ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå
      const keyOwnerUsername = results[0].discord_username || 'Unknown'; // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å redeemed_keys
      console.log('Key Information:', results[0]);

      // ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á `expired_keys`
      await db.promise().query('INSERT INTO `expired_keys` (`key_value`, `reason`, `expired_by`, `discord_user_id`, `expire_date`) VALUES (?, ?, ?, ?, ?)', 
        [key, 'Expired manually', interaction.user.username, keyOwnerDiscordId, expirationDate]);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const timeUntilExpiration = expirationDate.getTime() - Date.now();

      if (timeUntilExpiration <= 0) {
        // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await deleteKey();
      } else {
        // ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        setTimeout(deleteKey, timeUntilExpiration);
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      interaction.reply({ content: `The key \`${key}\` has been set to expire on ${expirationDate.toLocaleString()}. The process will complete once expired.`, ephemeral: true });

    } catch (error) {
      console.error('Error handling key expiration:', error);
      return interaction.reply({ content: 'An error occurred while processing the key expiration.', ephemeral: true });
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå
    async function deleteKey() {
      try {
        // ‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á `key_table` ‡πÅ‡∏•‡∏∞ `redeemed_keys`
        await db.promise().query('DELETE FROM `key_table` WHERE `key` = ?', [key]);
        await db.promise().query('DELETE FROM `redeemed_keys` WHERE `key` = ?', [key]);
        await db.promise().query('DELETE FROM `expired_keys` WHERE `key_value` = ?', [key]);

        interaction.followUp({
          content: `‚úÖ The key \`${key}\` has been expired and removed from the system.`,
          ephemeral: true
        });
      } catch (err) {
        console.error('Error deleting key from database:', err);
        interaction.followUp({ content: 'An error occurred while deleting the key.', ephemeral: true });
      }
    }
  }
});
client.once('ready', async () => {
  try {
    await client.application.commands.create({
      name: 'setexpire',
      description: 'Set the expiration time for a key',
      options: [
        {
          type: 3, // STRING: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå
          name: 'key',
          description: 'The key you want to expire',
          required: true,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
          name: 'days',
          description: 'Number of days before expiration',
          required: false,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
          name: 'hours',
          description: 'Number of hours before expiration',
          required: false,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
          name: 'minutes',
          description: 'Number of minutes before expiration',
          required: false,
        },
        {
          type: 4, // INTEGER: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          name: 'seconds',
          description: 'Number of seconds before expiration',
          required: false,
        },
      ],
    });

    console.log('‚úÖ Slash command /setexpire registered successfully');
  } catch (error) {
    console.error('‚ùå Failed to register /setexpire command:', error);
  }
});
client.on('interactionCreate', async (interaction) => {
  if (interaction.commandName === 'setexpire') {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({ content: 'You do not have permission to use this command.', ephemeral: true });
    }

    const key = interaction.options.getString('key');
    const days = interaction.options.getInteger('days') || 0;
    const hours = interaction.options.getInteger('hours') || 0;
    const minutes = interaction.options.getInteger('minutes') || 0;
    const seconds = interaction.options.getInteger('seconds') || 0;

    const currentDate = new Date();
    const expirationDate = new Date(currentDate.getTime() + 
      days * 24 * 60 * 60 * 1000 +
      hours * 60 * 60 * 1000 +
      minutes * 60 * 1000 +
      seconds * 1000
    );

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á redeemed_keys
      const [redeemed] = await db.promise().query('SELECT * FROM `redeemed_keys` WHERE `key` = ?', [key]);

      if (redeemed.length === 0) {
        return interaction.reply({ content: '‚ùå This key has not been redeemed.', ephemeral: true });
      }

      const keyOwnerDiscordId = redeemed[0].user_name;
      const keyOwnerUsername = redeemed[0].discord_username || 'Unknown';

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡∏á‡πÉ‡∏ô expired_keys
      await db.promise().query('INSERT INTO `expired_keys` (`key_value`, `reason`, `expired_by`, `discord_user_id`, `expire_date`) VALUES (?, ?, ?, ?, ?)', 
        [key, 'Set to expire after redeem', interaction.user.username, keyOwnerDiscordId, expirationDate]);

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      const timeUntilExpire = expirationDate.getTime() - Date.now();

      if (timeUntilExpire <= 0) {
        await deleteKey();
      } else {
        setTimeout(deleteKey, timeUntilExpire);
      }

      interaction.reply({
        content: `‚úÖ Key \`${key}\` will expire on ${expirationDate.toLocaleString()}.`,
        ephemeral: true
      });

    } catch (err) {
      console.error('Error setting expire for key:', err);
      interaction.reply({ content: '‚ùå Failed to set expiration for the key.', ephemeral: true });
    }

    async function deleteKey() {
      try {
        await db.promise().query('DELETE FROM `key_table` WHERE `key` = ?', [key]);
        await db.promise().query('DELETE FROM `redeemed_keys` WHERE `key` = ?', [key]);
        await db.promise().query('DELETE FROM `expired_keys` WHERE `key_value` = ?', [key]);

        console.log(`‚úÖ Key ${key} expired and removed.`);
      } catch (err) {
        console.error('‚ùå Error while deleting expired key:', err);
      }
    }
  }
});


client.login(token);

// index.js
const express = require('express');
const cors = require('cors');
const app = express();
const port = 3000;

// ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡πÑ‡∏î‡πâ
app.use(cors());
app.use(express.json());

// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏à‡∏£‡∏¥‡∏á)
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
db.connect((err) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to MySQL database');
});

app.post('/checkandupdate', (req, res) => {
  const { key, hwid } = req.body;
  let responseSent = false;

  const safeSend = (status, message) => {
    if (!responseSent) {
      responseSent = true;
      res.status(status).send(message);
    } else {
      console.warn('[‚ö†Ô∏è] Tried to send multiple responses');
    }
  };

  console.log('[üí¨] BODY RECEIVED:', req.body);

  if (!key || !hwid) {
    console.warn('[‚ö†Ô∏è] Missing key or hwid');
    return safeSend(400, "return warn('Missing key or hwid')");
  }

  db.query('SELECT * FROM `redeemed_keys` WHERE `key` = ?', [key], (err, rows) => {
    if (err) {
      console.error('[‚ùå] DB Query Error:', err);
      return safeSend(500, "return warn('Database error')");
    }

    if (rows.length === 0) {
      console.warn('[üö´] Key not found:', key);
      return safeSend(403, "return game.Players.LocalPlayer:Kick('Invalid or unredeemed key')");
    }

    const current = rows[0];
    console.log(`[üìÑ] Found key in DB: ${key} | HWID = ${current.hwid}`);
    const discordName = current.user_name ? `@${current.user_name.replace(/"/g, '\\"')}` : "@Unknown";
    const script = `
    local redeemedKey = "${current.key}"
    local discordName = "${discordName}"
    local total_executed = ${current.total_executed}
    local tokens = ${current.tokens}
    -- ‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠...
        
    
    -- ‡∏™‡πà‡∏á Webhook
    local webh =
"https://discord.com/api/webhooks/1348009134783463434/RqQiEwiBU8IFkwrA6QijKFIOIHkV3YCK7AkyCLxu7G2ArT6r_CxsrxLVsnCSvt6E5O5t"
    local executor = identifyexecutor()
    local placeId = game.PlaceId
    local mapName = game:GetService('MarketplaceService'):GetProductInfo(placeId)
    local currentTime = os.date('%Y-%m-%d %H:%M:%S')
    local player = game.Players.LocalPlayer
    local playerName = player.Name
    local playerDisplayName = player.DisplayName
    local playerPosition = player.Character and player.Character:FindFirstChild('HumanoidRootPart') and player.Character.HumanoidRootPart.Position or 'Unknown'
    local clientId = game:GetService('RbxAnalyticsService'):GetClientId()
    local jobId = game.JobId
    
    pcall(function()
        local data = {
            ['embeds'] = {
                {
                    ['title'] = 'üìä Script Execution Log',
                    ['fields'] = {
                        { name = 'üë§ Discord ID', value = discordName, inline = true },
                        { name = 'üîë Key', value = "||" .. redeemedKey .. "||", inline = true },
                        { name = 'üéÆ Roblox Name', value = playerName .. ' (' .. playerDisplayName .. ')', inline = false },
                        { name = 'üó∫Ô∏è Game', value = mapName.Name, inline = true },
                        { name = 'üìç Position', value = tostring(playerPosition), inline = true },
                        { name = '‚è∞ Time', value = currentTime, inline = true },
                        { name = 'üíª Executor', value = executor or 'Unknown', inline = true },
                        { name = 'üëë Total Executed', value = total_executed, inline = true },
                        { name = 'üîß Reset Token Left', value = tokens, inline = true },
                        { name = 'üß† Hardware Identification', value = "||" .. clientId .. "||", inline = false },
                        { name = 'üì¶ Job ID', value = jobId, inline = false }
                    },
                    ['color'] = tonumber(0x57F287)
                }
            }
        }
    
        local httpService = game:GetService('HttpService')
        local function send(data)
            if syn then
                syn.request({ Url = webh, Method = 'POST', Headers = { ['Content-Type'] = 'application/json' }, Body = httpService:JSONEncode(data) })
            elseif request then
                request({ Url = webh, Method = 'POST', Headers = { ['Content-Type'] = 'application/json' }, Body = httpService:JSONEncode(data) })
            elseif http_request then
                http_request({ Url = webh, Method = 'POST', Headers = { ['Content-Type'] = 'application/json' }, Body = httpService:JSONEncode(data) })
            end
        end
        send(data) 
    end)
    
    -- ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á
    return loadstring(game:HttpGet('https://raw.githubusercontent.com/tun9811x2livexrutzx777amhubcriptnosrc/tun9811x2livexrutzx777amhubcriptnosrcDynamic/refs/heads/main/tun9811x2livexrutzx777amhubcriptnosrcDynamic.lua'))()
    `;
    
    if (!current.hwid || current.hwid === '') {
      db.query('UPDATE `redeemed_keys` SET `hwid` = ? WHERE `key` = ?', [hwid, key], (err) => {
        if (err) {
          console.error('[‚ùå] HWID Update Error:', err);
          return safeSend(500, "return warn('HWID update error')");
        }

        console.log('[‚úÖ] HWID updated for key:', key);
        return safeSend(200, script);
      });
    } else {
      if (current.hwid === hwid) {
        console.log('[‚úÖ] HWID matched. Key valid.');

        db.query(
          'UPDATE `redeemed_keys` SET `total_executed` = `total_executed` + 1 WHERE `key` = ?',
          [key],
          (err) => {
            if (err) {
              console.error('[‚ùå] Error updating total_executed:', err);
              return safeSend(500, "return warn('Failed to update execution count.')");
            }

            console.log('[‚ûï] total_executed incremented for key:', key);
            return safeSend(200, script);
          }
        );
      } else {
        console.warn('[üö´] HWID mismatch for key:', key);
        return safeSend(403, "return game.Players.LocalPlayer:Kick('HWID mismatch. Please reset HWID using !resethwid')");
      }
    }
  });
});

app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ API server is running at http://0.0.0.0:${port}`);
});
